names(counts2)
names(counts)
counts <- as.data.frame(get.raw.data(counts.file = "/home/remi/Documents/pipeline/RNA-seq_analysis/merged_counts_small.txt"))
names(counts)
names(features)
names(t(features))
names(as.data.frame(t(features)))
intersect(names(counts), names(as.data.frame(t(features))))
length(intersect(names(counts), names(as.data.frame(t(features)))))
merge(counts, as.data.frame(t(features)))
intersect(counts, as.data.frame(t(features)))
intersect(names(counts), names(as.data.frame(t(features))))
View(counts)
keep <- intersect(names(counts), names(as.data.frame(t(features))))
counts <- counts[,keep]
counts <- as.data.frame(get.raw.data(counts.file = "/home/remi/Documents/pipeline/RNA-seq_analysis/merged_counts_small.txt"))
counts <- as.data.frame(get.raw.data(counts.file = "/home/remi/Documents/pipeline/merged_counts.txt"))
keep <- intersect(names(counts), names(as.data.frame(t(features))))
counts <- counts[,keep]
counts <- as.data.frame(get.raw.data(counts.file = "/home/remi/Documents/pipeline/merged_counts_small.txt"))
keep <- intersect(names(counts), names(as.data.frame(t(features))))
counts <- counts[,keep]
features <- features[keep,]
features
features <- read.delim(file="/home/remi/Documents/pipeline/RNA-seq_analysis/clinical.tsv", sep="\t", header=T)
View(counts)
dgeObj <- DGEList(counts)
dgeObj$samples
names(dgeObj$samples)
dgeObj$samples["group"]
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
shiny::runApp('Documents/pipeline/RNA-seq_analysis')
dgeObj$counts
dgeObj$samples
?brewer.pal
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
?legend
runApp('Documents/pipeline/RNA-seq_analysis')
?legend
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
?legend
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
as.numeric(levels(groups))
runApp('Documents/pipeline/RNA-seq_analysis')
set3.palette <- brewer.pal(12, "Set3")
mds.colors <- colorRampPalette(set3.palette)
heatmap.colors <- colorRampPalette(rdybu.palette)
## Get some nice colours using Rcolorbrewer
rdybu.palette <- brewer.pal(11,"RdYlBu")
set3.palette <- brewer.pal(12, "Set3")
mds.colors <- colorRampPalette(set3.palette)
heatmap.colors <- colorRampPalette(rdybu.palette)
runApp('Documents/pipeline/RNA-seq_analysis')
set3.palette[1]
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
shiny::runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
# ==============================
# UI
# ==============================
ui <- fluidPage(
tags$h1("RNA-seq data Analyzer"),
fileInput(
inputId = "counts.file",
label = "Select a RNA-seq count table",
width = "25%"
),
fileInput(
inputId = "features.file",
label = "Select the associated clinical features",
width = "25%"
),
# "Samples must be columns and genes must be rows.\
# The first line must be a header with the sample names. \
# The first columns must contain the gene identifiers.",
verbatimTextOutput(outputId="file"),
actionButton(inputId="explore", label="Run"),
plotOutput(outputId="logcpm.distrib", width="50%"),
selectInput(inputId="mds.grouping.feature",
label="Choose a clinical feature to group your samples",
choices = ""
),
actionButton(inputId="run.glimma", label="Glimma plot"),
plotOutput(outputId="mds", width="100%"),
htmlOutput(outputId="output.glimma", inline=TRUE),
?htmlOutput
plotOutput(outputId="most.variable.genes", width="75%"),
)
?htmlOutput
?glMDSPlot
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
dgeObj$samples
rownames(dgeObj$samples)
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
dgeObj$samples
features
View(features)
test <- merge(dgeObj$sample, features)
View(test)
test <- merge(dgeObj$sample, features, by.x="row.name")
View(test)
View(features)
test <- merge(dgeObj$sample, features, by.x="row.names")
test <- merge(dgeObj$sample, features, by.x="row.names", by.y=1)
View(test)
View(features)
rownames(features) <- feature[,1]
rownames(features) <- features[,1]
test <- merge(dgeObj$sample, features, by="row.names")
View(test)
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
dgeObj$samples
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
shiny::runApp('Documents/pipeline/RNA-seq_analysis')
library(iris)
data(iris)
plot1 <- glScatter(iris, xval="Sepal.Length", yval="Sepal.Width", colval="Species")
library(glimma)
plot1 <- glScatter(iris, xval="Sepal.Length", yval="Sepal.Width", colval="Species")
glScatter(iris, xval="Sepal.Length", yval="Sepal.Width", colval="Species")
glScatterPlot(iris, xval="Sepal.Length", yval="Sepal.Width", colval="Species")
shiny::runApp('Documents/pipeline/RNA-seq_analysis')
shiny::runApp('Documents/pipeline/RNA-seq_analysis')
?fluidRow
runApp('Documents/pipeline/RNA-seq_analysis')
install.packages("styler")
styler:::style_active_file()
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
shiny::runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
# ==============================
# UI
# ==============================
ui <- fluidPage(
titlePanel("RNA-seq data Analyzer"),
sidebarLayout(sidebarPanel(
# Panel1: Input the data
inputPanel(
# Input for the counts table
fileInput(inputId = "counts.file",
label = "Select a RNA-seq count table \n "),
# width = "25%"),
# tags$param("Samples must be columns and genes must be rows. The first line must be a header with the sample names. The first columns must contain the gene identifiers."),
# Input for the features table
fileInput(inputId = "features.file",
label = "Select the associated clinical features"),
# width = "100%"),
# Action button
# verbatimTextOutput(outputId="file"),
actionButton(inputId = "explore", label = "Exploratory Analysis")
),
# Panel2: Choose the feature and condition to test against the other group(s)
wellPanel(
selectInput(
inputId = "mdsGroupingFeature",
label = "Choose a clinical feature to group your samples",
choices = ""
),
# verbatimTextOutput("mds.group"),
conditionalPanel(
condition = "input.mdsGroupingFeature != ''",
radioButtons(
inputId = "DE.condition",
label = "Choose a condition to test against the others",
choices = ""
)
),
actionButton(inputId = "run.de", label = "Differential Expression Analysis")
)
),
mainPanel(
wellPanel(
"Data Exploration",
fluidRow(column(6,
plotOutput(outputId = "lib.sizes")), # , width="90%")),
column(
6,
plotOutput(outputId = "norm.logcpm.distrib") # , width="90%")
)),
br(),
fluidRow(
column(6,
align = "center",
fluidRow(plotOutput(outputId = "mds")),
fluidRow(
conditionalPanel(
condition = "input.explore != 0",
actionButton(inputId = "run.glimma", label = "Glimma MDS")
)
)),
column(6,
plotOutput(outputId = "most.variable.genes"))
),
htmlOutput("glimma") # , inline=TRUE)
),
wellPanel(
"Differential Gene Expression",
fluidRow(verbatimTextOutput(outputId = "de.summary")),
br(),
fluidRow(column(6,
plotOutput(outputId = "de.pval")),
column(6,
plotOutput(outputId = "de.fdr"))),
br(),
fluidRow(column(
6,
fluidRow(plotOutput(outputId = "de.smear")),
fluidRow(actionButton(inputId = "runGlimmaSmear", label = "Glimma Smear"))
),
column(6,
plotOutput(outputId = "de.volcano")),
br(),
# htmlOutput(outputId="de.volcano")),
htmlOutput(outputId="glimmaSmear")
)
))
))
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
shiny::runApp('Documents/pipeline/RNA-seq_analysis')
# library(org.Mm.eg.db)
# library(GO.db)
# library(Homo.sapiens)
# library(DESeq)
# library(limma)
isEmpty(NULL)
is.empty(NULL)
is_empty(null)
is_empty(NULL)
runApp('Documents/pipeline/RNA-seq_analysis')
load("Resources/data/DE.Rdata")
lrt <- readRDS("/home/remi/Documents/pipeline/RNA-seq_analysis/model.rds")
summary(dt <- decideTestsDGE(lrt))
dt@.Data
lrt$table
lrt$df.test
# ==============================
# Check Number of DE genes
# ==============================
# results <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results <- as.data.frame(topTags(lrt,n = Inf))
View(results)
# ==============================
# Check Number of DE genes
# ==============================
# results <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results <- topTags(lrt,n = Inf)
# results.df <- lrt.BvsL$table
# results.dt.df <- dt@.Data
# results[rownames(results.dt.df),]
decideTests(results)
View(results)
View(lrt)
# ==============================
# Check Number of DE genes
# ==============================
# results <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results <- as.data.frame(topTags(lrt,n = Inf))
results <- results[lrt$genes,]
lrt$genes
as.vector(lrt$genes)
results <- results[as.vector(lrt$genes),]
lrt$genes$genes
results <- results[lrt$genes$genes,]
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
rownames(de.df())
runApp('Documents/pipeline/RNA-seq_analysis')
dt
dt
results$logFC
is.vector(results$logFC)
runApp('Documents/pipeline/RNA-seq_analysis')
runApp('Documents/pipeline/RNA-seq_analysis')
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=results$FDR <= 0.05)
results$logFC
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=results$FDR <= 0.05)
results$FDR <= 0.05
results$logFC
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)")#
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
anno= results$genes)
results$FDR <= 0.05
is.na(results$FDR <= 0.05)
unique(is.na(results$FDR <= 0.05))
unique(results$FDR <= 0.05)
dim(results$FDR <= 0.05)
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=as.vector(results$FDR <= 0.05))
dim(as.vector(results$FDR <= 0.05))
(results$FDR <= 0.05))
dim(as.data.frame(results$FDR <= 0.05))
dim(results$logFC)
length(results$FDR <= 0.05)
length(as.daresults$logFC)
length(results$logFC)
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=as.character(results$FDR <= 0.05))
myStatus = as.numeric(results$FDR <= 0.05 & results$logFC > 2)
unique(myStatus)
myStatus2 = as.numeric(results$FDR <= 0.05 & results$logFC < -2)
myStatus = myStatus1 - myStatus2
unique(myStatus)
unique(myStatus1)
myStatus1 = as.numeric(results$FDR <= 0.05 & results$logFC > 2)
myStatus2 = as.numeric(results$FDR <= 0.05 & results$logFC < -2)
unique(myStatus1)
myStatus = myStatus1 - myStatus2
unique(myStatus)
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=myStatus)
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=myStatus,
anno=as.character(de.df()$genes))
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=myStatus,
anno=as.character(results$genes))
results$genes
results[,c(0,1)]
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=myStatus,
anno=results[,c(0,1)])
glXYPlot(x= results$logFC,
y=-log10(results$FDR),
xlab="logFC",
ylab="-log(FDR)",
status=myStatus,
anno=results[,1])
shiny::runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
?expand_limits
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
?top_n
?top_n
?mutate
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
runApp('Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis')
genes <- results.annotated $FDR < 0.01
library(goseq)
library(dplyr)
library(ggplot2)
setwd("/home/remi/Documents/Interesting/pipeline_RNA-seq_R")
results.annotated <- read.table("Output/Annotation/results_table.csv", sep=',', header=T, row.names=1)
directory <- "Output/Enrichment/"
results.annotated <- read.table(file.path(directory, "results_table.csv"), sep=',', header=T, row.names=1)
# ==============================
# Get differentially expressed genes
# ==============================
# Derive list of DEGs by filtering on FDR:
head(results.annotated)
keep = !is.na(results.annotated$ENSEMBL)
results.annotated <- results.annotated[keep,]
genes <- results.annotated $FDR < 0.01
names(genes) <- results.annotated$ENSEMBL
plot_enriched_functions <- function(directory, enriched.GO.results) {
enriched.GO.results %>%
top_n(10, wt=-over_represented_pvalue) %>%
mutate(hitsPerc=numDEInCat*100/numInCat) %>%
ggplot(aes(x=hitsPerc,
y=term,
colour=over_represented_pvalue,
size=numDEInCat)) +
geom_point() +
expand_limits(x=0) +
labs(x="Hits (%)", y="GO term", colour="p value", size="Count")
ggsave(file.path(directory, "most_enriched_functions.png"))
}
plot_enriched_functions <- function(directory, enriched.GO.results) {
enriched.GO.results %>%
top_n(10, wt=-over_represented_pvalue) %>%
mutate(hitsPerc=numDEInCat*100/numInCat) %>%
ggplot(aes(x=hitsPerc,
y=term,
colour=over_represented_pvalue,
size=numDEInCat)) +
geom_point() +
expand_limits(x=0) +
labs(x="Hits (%)", y="GO term", colour="p value", size="Count")
# ggsave(file.path(directory, "most_enriched_functions.png"))
}
nullp(genes, "hg19", "ensGene")
pwf <- nullp(genes, "hg19", "ensGene")
go.results <- goseq(pwf, "hg19","ensGene", test.cats = c("GO:BP"))
enriched.GO <- go.results$category[p.adjust(go.results$over_represented_pvalue,method="BH")<.01]
enriched.GO.results <- merge(go.results, as.data.frame(enriched.GO), by.x="category", by.y="enriched.GO")
plot_enriched_functions(directory, enriched.GO.results)
runApp('RNA-seq_analysis')
runApp('RNA-seq_analysis')
runApp('RNA-seq_analysis')
?mutate
pwd
pwd()
pw()
getpw()
getpwd()
wd()
wd
getwd()
setwd("/home/remi/Documents/Interesting/pipeline_RNA-seq_R/RNA-seq_analysis")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
